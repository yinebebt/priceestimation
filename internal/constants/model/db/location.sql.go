// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: location.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const addLocation = `-- name: AddLocation :one
INSERT INTO location (
                      country,
                      region,
                      zone,
                      city) values ($1,$2,$3,$4) returning id, country, region, zone, city, created_at, updated_at
`

type AddLocationParams struct {
	Country string `json:"country"`
	Region  string `json:"region"`
	Zone    string `json:"zone"`
	City    string `json:"city"`
}

func (q *Queries) AddLocation(ctx context.Context, arg AddLocationParams) (Location, error) {
	row := q.db.QueryRow(ctx, addLocation,
		arg.Country,
		arg.Region,
		arg.Zone,
		arg.City,
	)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.Country,
		&i.Region,
		&i.Zone,
		&i.City,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteLocation = `-- name: DeleteLocation :exec
DELETE FROM location
WHERE id = $1
`

func (q *Queries) DeleteLocation(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteLocation, id)
	return err
}

const getLocation = `-- name: GetLocation :one
SELECT id, country, region, zone, city, created_at, updated_at FROM location
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetLocation(ctx context.Context, id uuid.UUID) (Location, error) {
	row := q.db.QueryRow(ctx, getLocation, id)
	var i Location
	err := row.Scan(
		&i.ID,
		&i.Country,
		&i.Region,
		&i.Zone,
		&i.City,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getLocations = `-- name: GetLocations :many
SELECT id, country, region, zone, city, created_at, updated_at FROM location
ORDER BY created_at
`

func (q *Queries) GetLocations(ctx context.Context) ([]Location, error) {
	rows, err := q.db.Query(ctx, getLocations)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Location{}
	for rows.Next() {
		var i Location
		if err := rows.Scan(
			&i.ID,
			&i.Country,
			&i.Region,
			&i.Zone,
			&i.City,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
